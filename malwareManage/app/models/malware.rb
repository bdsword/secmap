require 'cassandra'

class Malware
	extend ActiveModel::Naming
	include ActiveModel::Conversion
	
	attr_reader :id

	def persisted?
    		false
  	end

	def Malware.connect()
		hosts = ["192.168.100.107:9160","192.168.100.109:9160","192.168.100.110:9160","192.168.100.111:9160","192.168.100.112:9160"]
		@client = Cassandra.new('SECMAP',hosts)
		@analyzers = Analyzer.getType().split(' ')
		@reports = {}
		@analyzers.each do |analyzer|
		 	@reports[analyzer] = Report.new({'cas'=>@client, 'analyzer'=>analyzer})
		end
	end

	def initialize(param = nil)
		@id = param
		p @id
	end
	
	def save(param)
		p "MD5"+@id
		p param
		if @client == nil
                        #Malware.connect()
			@client = Cassandra.new('SECMAP',"192.168.100.107:9160")
                end
		@client.insert(:SUMMARY, @id , {"content" => param})
	end

	def Malware.model_name()
		p "model name"
		return "Malware"
	end
	
	def Malware.all(param=nil)
		p "Listing all Malware"
		if @client == nil
			connect()
		end
		start = 0	
		if param == nil
			@list = @client.get_range(:SUMMARY, :key_count => 100)
		else
			@list = @client.get_range(:SUMMARY, :key_count => 100,:start_key => param)
		end
		return @list
	end

	def Malware.find(param)
		if @client == nil
			connect()
                end
		taskUid = param
		mal = @client.get(:SUMMARY, taskUid )
		#@analyzers = Analyzer.getType()
		@analyzers.each do |analyzer|
			mal[analyzer]= @reports[analyzer].find(param)
			#mal[analyzer]= @mba.find(param)
		end
		return [taskUid, mal]
	end
end
